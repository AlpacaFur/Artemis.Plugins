# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

resources:
  repositories:
  - repository: RGBdotNET
    type: github
    endpoint: github.com_SpoinkyNL
    name: DarthAffe/RGB.NET
    ref: Development
  - repository: Artemis
    type: github
    endpoint: github.com_SpoinkyNL
    name: Artemis-RGB/Artemis
    ref: master

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  rgbSolution: '**/RGB.NET.sln'
  artemisSolution: '**/Artemis.sln'
  pluginSolution: '**/Artemis.Plugins.sln'
  pluginProjects: '**/Artemis.Plugins.*.csproj'

steps:
- checkout: RGBdotNET
- checkout: Artemis
- checkout: self

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: 'NuGet restore RGB.NET'
  inputs:
    restoreSolution: '$(rgbSolution)'

- task: VSBuild@1
  displayName: 'Build RGB.NET'
  inputs:
    solution: '$(rgbSolution)'
    msbuildArgs: '/property:WarningLevel=0'

- task: NuGetCommand@2
  displayName: 'NuGet restore Artemis'
  inputs:
    restoreSolution: '$(artemisSolution)'

- task: DotNetCoreCLI@2
  displayName: 'Build Artemis'
  inputs:
    command: 'build'
    projects: '$(artemisSolution)'
    arguments: '/property:WarningLevel=0'

- task: NuGetCommand@2
  displayName: 'NuGet restore Artemis.Plugins'
  inputs:
    restoreSolution: '$(pluginSolution)'

- task: DotNetCoreCLI@2
  displayName: 'Publish Artemis.Plugins'
  inputs:
    command: 'publish'
    publishWebProjects: false
    arguments: '--runtime win-x64 --self-contained false --output $(Build.ArtifactStagingDirectory)/build/Plugins'
    projects: '$(pluginProjects)'

- task: PublishPipelineArtifact@1
  displayName: 'Upload build to Azure Pipelines'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/build'
    artifact: 'Artemis build'
    publishLocation: 'pipeline'